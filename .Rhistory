"tennessee",
"utah",
"new mexico",
"kentucky",
"virginia",
"mississippi")] <- 1
train <- fullset %>%
filter(trainYN == 1)
test <- fullset %>%
filter(trainYN == 0)
my_tree <- rpart(wageHike ~ MinWage + Housing + Food + ChildCare + Medical + division + family + union + leg + gov + rtw, data = train, method = "class")
# visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# plot fancy tree
fancyRpartPlot(my_tree, f)
my_tree <- rpart(wageHike ~ MinWage + LivingWage + division + family + union + leg + gov + rtw, data = train, method = "class")
my_tree <- rpart(wageHike ~ MinWage + LivingWage + division + family + union + leg + gov + rtw, data = train, method = "class")
# visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# plot fancy tree
fancyRpartPlot(my_tree, f)
my_tree <- rpart(wageHike ~ MinWage + LivingWage + family + union + leg + gov + rtw, data = train, method = "class")
# visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# plot fancy tree
fancyRpartPlot(my_tree, f)
fancyRpartPlot(my_tree)
fancyRpartPlot(my_tree, f)
fancyRpartPlot(my_tree, f)
my_tree <- rpart(wageHike ~ MinWage + LivingWage + division + family + union + leg + gov + rtw, data = train, method = "class")
# visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# plot fancy tree
fancyRpartPlot(my_tree, f)
my_tree <- rpart(wageHike ~ MinWage + LivingWage + division + family + union + leg + gov + rtw, data = train, method = "class")
# visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# plot fancy tree
fancyRpartPlot(my_tree, f)
my_tree <- rpart(wageHike ~ MinWage + LivingWage + family + union + leg + gov + rtw, data = train, method = "class")
# visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# plot fancy tree
fancyRpartPlot(my_tree, f)
my_tree <- rpart(wageHike ~ MinWage + Housing + Food + Medical + family + union + leg + gov + rtw, data = train, method = "class")
# visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# plot fancy tree
fancyRpartPlot(my_tree, f)
View(fullset)
my_tree <- rpart(wageHike ~ MinWage + Housing + Food + Medical + ChildCare + family + union + leg + gov + rtw, data = train, method = "class")
my_tree <- rpart(wageHike ~ MinWage + Housing + Food + Medical + ChildCare + family + union + leg + gov + rtw, data = train, method = "class")
# visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# plot fancy tree
fancyRpartPlot(my_tree, f)
my_tree <- rpart(wageHike ~  Housing + Food + Medical + ChildCare + family + union + leg + gov + rtw, data = train, method = "class")
# visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# plot fancy tree
fancyRpartPlot(my_tree, f)
my_tree <- rpart(wageHike ~ MinWage + Housing + Food + Medical + ChildCare + union + leg + gov + rtw, data = train, method = "class")
# visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# plot fancy tree
fancyRpartPlot(my_tree, f)
View(test)
prediction_tree <- predict(my_tree, test, type = "class")
solution_tree <- data.frame(State = test$region, WageHikeYN = prediction_tree)
View(solution_tree)
my_tree <- rpart(wageHike ~ MinWage + Housing + family + Food + Medical + ChildCare + union + leg + gov + rtw, data = train, method = "class")
# visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# plot fancy tree
fancyRpartPlot(my_tree, f)
# make prediction using the test set
prediction_tree <- predict(my_tree, test, type = "class")
solution_tree <- data.frame(State = test$region, WageHikeYN = prediction_tree)
View(solution_tree)
solution_tree <- data.frame(state = test$region, wagehike = prediction_tree)
by_state <- group_by(solution_tree, state)
solution_tree <- summarise(by_state,
wagehikeYN = mode(wageHike))
by_state <- group_by(solution_tree, state)
solution_tree <- summarise(by_state,
wagehikeYN = mode(wagehike))
View(solution_tree)
getMode <- function(v) {
val <- unique(v)
val[which.max(tabulate(match(v, val)))]
}
by_state <- group_by(solution_tree, state)
solution_tree <- summarise(by_state,
wagehikeYN = getMode(wagehike))
solution_tree <- data.frame(state = test$region, wagehike = prediction_tree)
by_state <- group_by(solution_tree, state)
solution_tree <- summarise(by_state,
wagehikeYN = getMode(wagehike))
View(solution_tree)
test <- fullset
# prediction #1 - using decision trees
# build decision tree
my_tree <- rpart(wageHike ~ MinWage + Housing + family + Food + Medical + ChildCare + union + leg + gov + rtw, data = train, method = "class")
# visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# plot fancy tree
fancyRpartPlot(my_tree, f)
# make prediction using the test set
prediction_tree <- predict(my_tree, test, type = "class")
# create data frame with two columns state and wageHike
solution_tree <- data.frame(state = test$region, wagehike = prediction_tree)
by_state <- group_by(solution_tree, state)
solution_tree <- summarise(by_state,
wagehikeYN = getMode(wagehike))
View(test)
View(solution_tree)
tmp <- inner_join (solution_tree, train)
names(train)
names(train)[1]<- "state"
tmp <- inner_join (solution_tree, train)
names(train)[1]<- "state"
tmp <- inner_join (solution_tree, train)
tmp <- tmp %>%
select(state, wagehikeYN, wagehike)
tmp <- tmp %>%
select(state, wagehikeYN, wageHike)
View(tmp)
# make prediction using the test set
prediction_tree <- predict(my_tree, test, type = "class")
# create data frame with two columns state and wageHike
solution_tree <- data.frame(state = test$region, wageHike = prediction_tree)
names(train)[1]<- "state"
tmp <- inner_join (solution_tree, train)
solution_tree <- data.frame(state = test$region, wageHike = prediction_tree)
View(solution_tree)
names(train)[1]<- "state"
tmp <- inner_join (solution_tree, train, by = "state")
tmp <- tmp %>%
select(state, wagehikeYN, wageHike)
View(tmp)
solution_tree <- data.frame(state = test$region, wageHikeT = prediction_tree)
tmp <- inner_join (solution_tree, train, by = "state")
tmp <- tmp %>%
select(state, wageHike, wageHikeT)
View(tmp)
by_state <- group_by(solution_tree, state)
solution_tree <- summarise(by_state,
original = getMode(wageHike),
decTree = getMode(wageHikeT))
solution_tree <- data.frame(state = test$region, wageHikeT = prediction_tree)
names(train)[1]<- "state"
tmp <- inner_join (solution_tree, train, by = "state")
tmp <- tmp %>%
select(state, wageHike, wageHikeT)
# create summary by state
by_state <- group_by(tmp, state)
tmp <- summarise(by_state,
original = getMode(wageHike),
decTree = getMode(wageHikeT))
solution_tree <- data.frame(state = test$region, wageHikeT = prediction_tree)
names(train)[1]<- "state"
tmp <- inner_join (solution_tree, test, by = "state")
tmp <- tmp %>%
select(state, wageHike, wageHikeT)
# create summary by state
by_state <- group_by(tmp, state)
tmp <- summarise(by_state,
original = getMode(wageHike),
decTree = getMode(wageHikeT))
solution_tree <- data.frame(state = test$region, wageHikeT = prediction_tree)
names(train)[1]<- "state"
names(test)[1]<- "state"
tmp <- inner_join (solution_tree, test, by = "state")
View(tmp)
tmp <- tmp %>%
select(state, wageHike, wageHikeT)
by_state <- group_by(tmp, state)
tmp <- summarise(by_state,
original = getMode(wageHike),
decTree = getMode(wageHikeT))
fullset$wageHike[fullset$region %in%
c("arkansas",
"connecticut",
"delaware",
"maryland",
"massachusetts",
"minnesota",
"nebraska",
"rhode island",
"south dakota",
"vermont",
"west virginia")] <- 1
View(tmp)
fullset <- inner_join (hourly_wages, expenses)
fullset <- inner_join (fullset, supp_data)
fullset <- fullset %>%
select(-PovertyWage, -ReqdIncomeAfterTaxes, -Transportation, -Other)
fullset <- inner_join (hourly_wages, expenses)
fullset <- inner_join (fullset, supp_data, by = "region")
fullset <- fullset %>%
select(-PovertyWage, -ReqdIncomeAfterTaxes, -Transportation, -Other)
fullset$wageHike <- 0
fullset$wageHike[fullset$region %in%
c("arkansas",
"connecticut",
"delaware",
"maryland",
"massachusetts",
"minnesota",
"nebraska",
"rhode island",
"south dakota",
"vermont",
"west virginia")] <- 1
# create test and train datasets for prediction models
fullset$trainYN <- 0
fullset$trainYN[fullset$wageHike == 1] <- 1
fullset$trainYN[fullset$region %in%
c("alabama",
"illinois",
"indiana",
"texas",
"flordia",
"north carolina",
"nevada",
"tennessee",
"utah",
"new mexico",
"kentucky",
"virginia",
"mississippi")] <- 1
train <- fullset %>%
filter(trainYN == 1)
test <- fullset %>%
filter(trainYN == 0)
my_tree <- rpart(wageHike ~ MinWage + Housing + family + Food + Medical + ChildCare + union + leg + gov + rtw, data = train, method = "class")
plot(my_tree)
text(my_tree)
fancyRpartPlot(my_tree, f)
prediction_tree <- predict(my_tree, test, type = "class")
solution_tree <- data.frame(state = test$region, wageHikeT = prediction_tree)
# --------------------------------------------
fullset <- inner_join (hourly_wages, expenses)
fullset <- inner_join (fullset, supp_data, by = "region")
fullset <- fullset %>%
select(-PovertyWage, -ReqdIncomeAfterTaxes, -Transportation, -Other)
# create wage hike column and set all states that have increased their minimum wage since 2015 to 1
# this does not include states that raise min. wage regularly to correct for inflation (e.g. montana, missouri, nevada etc.)
fullset$wageHike <- 0
fullset$wageHike[fullset$region %in%
c("arkansas",
"connecticut",
"delaware",
"maryland",
"massachusetts",
"minnesota",
"nebraska",
"rhode island",
"south dakota",
"vermont",
"west virginia")] <- 1
# create test and train datasets for prediction models
fullset$trainYN <- 0
fullset$trainYN[fullset$wageHike == 1] <- 1
fullset$trainYN[fullset$region %in%
c("alabama",
"illinois",
"indiana",
"flordia",
"north carolina",
"nevada",
"utah",
"new mexico",
"kentucky",
"virginia",
"mississippi")] <- 1
train <- fullset %>%
filter(trainYN == 1)
test <- fullset %>%
filter(trainYN == 0)
# prediction #1 - using decision trees
# build decision tree
my_tree <- rpart(wageHike ~ MinWage + Housing + family + Food + Medical + ChildCare + union + leg + gov + rtw, data = train, method = "class")
# visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# plot fancy tree
fancyRpartPlot(my_tree, f)
# --------------------------------------------
fullset <- inner_join (hourly_wages, expenses)
fullset <- inner_join (fullset, supp_data, by = "region")
fullset <- fullset %>%
select(-PovertyWage, -ReqdIncomeAfterTaxes, -Transportation, -Other)
# create wage hike column and set all states that have increased their minimum wage since 2015 to 1
# this does not include states that raise min. wage regularly to correct for inflation (e.g. montana, missouri, nevada etc.)
fullset$wageHike <- 0
fullset$wageHike[fullset$region %in%
c("arkansas",
"connecticut",
"delaware",
"maryland",
"massachusetts",
"minnesota",
"nebraska",
"rhode island",
"south dakota",
"vermont",
"west virginia")] <- 1
# create test and train datasets for prediction models
fullset$trainYN <- 0
fullset$trainYN[fullset$wageHike == 1] <- 1
fullset$trainYN[fullset$region %in%
c("alabama",
"illinois",
"indiana",
"texas",
"flordia",
"north carolina",
"nevada",
"tennessee",
"utah",
"new mexico",
"kentucky",
"virginia",
"mississippi")] <- 1
train <- fullset %>%
filter(trainYN == 1)
test <- fullset %>%
filter(trainYN == 0)
# prediction #1 - using decision trees
# build decision tree
my_tree <- rpart(wageHike ~ MinWage + Housing + family + Food + Medical + ChildCare + union + leg + gov + rtw, data = train, method = "class")
# visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# plot fancy tree
fancyRpartPlot(my_tree, f)
View(solution_tree)
View(tmp)
prediction_tree <- predict(my_tree, test, type = "class")
# create data frame with two columns state and wageHike
solution_tree <- data.frame(state = test$region, wageHike = prediction_tree)
by_state <- group_by(solution_tree, state)
solution_tree <- summarise(by_state,
decTree = getMode(wageHike))
View(solution_tree)
fullset <- inner_join (hourly_wages, expenses)
fullset <- inner_join (fullset, supp_data, by = "region")
fullset <- fullset %>%
select(-PovertyWage, -ReqdIncomeAfterTaxes, -Transportation, -Other)
# create wage hike column and set all states that have increased their minimum wage since 2015 to 1
# this does not include states that raise min. wage regularly to correct for inflation (e.g. montana, missouri, nevada etc.)
fullset$wageHike <- 0
fullset$wageHike[fullset$region %in%
c("arkansas",
"connecticut",
"delaware",
"maryland",
"massachusetts",
"minnesota",
"nebraska",
"rhode island",
"south dakota",
"vermont",
"west virginia")] <- 1
# create test and train datasets for prediction models
fullset$trainYN <- 0
fullset$trainYN[fullset$wageHike == 1] <- 1
fullset$trainYN[fullset$region %in%
c("alabama",
"illinois",
"indiana",
"texas",
"flordia",
"north carolina",
"nevada",
"tennessee",
"utah",
"new mexico",
"kentucky",
"virginia")] <- 1
train <- fullset %>%
filter(trainYN == 1)
test <- fullset %>%
filter(trainYN == 0)
# prediction #1 - using decision trees
# build decision tree
my_tree <- rpart(wageHike ~ MinWage + Housing + family + Food + Medical + ChildCare + union + leg + gov + rtw, data = train, method = "class")
# visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# plot fancy tree
fancyRpartPlot(my_tree, f)
fullset <- inner_join (hourly_wages, expenses)
fullset <- inner_join (fullset, supp_data, by = "region")
fullset <- fullset %>%
select(-PovertyWage, -ReqdIncomeAfterTaxes, -Transportation, -Other)
# create wage hike column and set all states that have increased their minimum wage since 2015 to 1
# this does not include states that raise min. wage regularly to correct for inflation (e.g. montana, missouri, nevada etc.)
fullset$wageHike <- 0
fullset$wageHike[fullset$region %in%
c("arkansas",
"connecticut",
"delaware",
"maryland",
"massachusetts",
"minnesota",
"nebraska",
"rhode island",
"south dakota",
"vermont",
"west virginia")] <- 1
# create test and train datasets for prediction models
fullset$trainYN <- 0
fullset$trainYN[fullset$wageHike == 1] <- 1
fullset$trainYN[fullset$region %in%
c("alabama",
"illinois",
"indiana",
"texas",
"flordia",
"north carolina",
"nevada",
"tennessee",
"utah",
"new mexico",
"kentucky",
"virginia",
"mississippi")] <- 1
train <- fullset %>%
filter(trainYN == 1)
test <- fullset %>%
filter(trainYN == 0)
# prediction #1 - using decision trees
# build decision tree
my_tree <- rpart(wageHike ~ MinWage + Housing + family + Food + Medical + ChildCare + union + leg + gov + rtw, data = train, method = "class")
# visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# plot fancy tree
fancyRpartPlot(my_tree, f)
# make prediction using the test set
prediction_tree <- predict(my_tree, test, type = "class")
# create data frame with two columns state and wageHike
solution_tree <- data.frame(state = test$region, wageHike = prediction_tree)
# create summary by state
by_state <- group_by(solution_tree, state)
solution_tree <- summarise(by_state,
decTree = getMode(wageHike))
str(train)
test$gov <- factor(test$gov)
test$leg <- factor(test$leg)
test$rtw <- factor(test$rtw)
str(train)
train$gov <- factor(train$gov)
train$leg <- factor(train$leg)
train$rtw <- factor(train$rtw)
str(train)
str(test)
forrest <- randomForest(as.factor(wageHike) ~  MinWage + Housing + family + Food + Medical + ChildCare + union + leg + gov + rtw, data=train, importance=TRUE, ntree=2000)
varImpPlot(forrest)
prediction_forrest <- predict(forrest, test)
# make prediction using the complete dataset
prediction_forrest <- predict(forrest, test)
# create data frame with two columns per kaggle rules: PassengerId & Survived
solution_tree <- data.frame(state = test$region, wageHike = prediction_forrest)
solution_tree <- data.frame(state = test$region, wageHike = prediction_tree)
# create summary by state
by_state <- group_by(solution_tree, state)
solution_tree <- summarise(by_state,
decTree = getMode(wageHike))
View(solution_tree)
by_state <- group_by(solution_forrest, state)
prediction_forrest <- predict(forrest, test)
# create data frame with two columns per kaggle rules: PassengerId & Survived
solution_forrest <- data.frame(state = test$region, wageHike = prediction_forrest)
# create summary by state
by_state <- group_by(solution_forrest, state)
View(solution_forrest)
by_state <- group_by(solution_forrest, state)
solution_forrest <- summarise(by_state,
ranForrest = getMode(wageHike))
View(solution_forrest)
set.seed (400)
party <- cforest(as.factor(wageHike) ~  MinWage + Housing + family + Food + Medical + ChildCare + union + leg + gov + rtw, data = train, controls = cforest_unbiased(ntree=2000, mtry=3))
prediction_inf_forrest <- predict(party, test, OOB=TRUE, type="response")
# make prediction using the complete dataset
prediction_inf_forrest <- predict(party, test, OOB=TRUE, type="response")
# create data frame with two columns per kaggle rules: PassengerId & Survived
solution_inf_forrest <- data.frame(state = test$region, wageHike = prediction_inf_forrest)
by_state <- group_by(solution_inf_forrest, state)
solution_inf_forrest <- summarise(by_state,
infForrest = getMode(wageHike))
View(solution_inf_forrest)
solution <- inner_join(solution_tree, solution_forrest, by = "state")
solution <- inner_join(solution_forrest, solution_inf_forrest, by = "state")
solution <- inner_join(solution_tree, solution_forrest, by = "state")
solution <- inner_join(solution, solution_inf_forrest, by = "state")
write.csv(solution, file="prediction_wage_hike_states.csv" , row.names = FALSE)
View(solution)
